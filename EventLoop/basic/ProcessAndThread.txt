Operation System
    |
    |
    ------->    Process
    |              |
    |              |
    |              ------>  Code
    |              |
    |              |
    |              ------>  Stack
    |              |
    |              |
    |              ------>  Heap
    |              |
    |              |
    |              ------>  Data
    |
    |
    ------->    Process
    |              |
    |              |
    |              ------>  Code
    |              |
    |              |
    |              ------>  Stack
    |              |
    |              |
    |              ------>  Heap
    |              |
    |              |
    |              ------>  Data
    |
    |
    ------->    Process
                    |
                    |
                    ------>  Code
                    |
                    |
                    ------>  Stack
                    |
                    |
                    ------>  Heap
                    |
                    |
                    ------>  Data

프로세스 : 컴퓨터 위에, 즉 운영체제 위에서 연속적으로 실행되고 있는 프로그램
            -> 음악재생 프로그램, 사진뷰어 프로그램 등등 이런 것들 하나는 각각의 프로세스를 가지고 있다.
          각각의 프로세스는 메모리 위에서 실행되고 있다(서로 독립적으로 실행)
          그래서 만약 첫번째 프로세스에서 문제가 발생하면 해당 프로세스만 죽게 된다.

         ==> 프로세스는 운영체제 위에서 독립적으로 메모리에서 실행되고 있는 프로그램
         그리고 각각의 프로세스는 리소스 자원들이 정해져 있다.
         즉 프로세스 마다 할당된 메모리나 데이터들이 지정되어져 있다.


이 프로세스 안에 프로그램을 위해
    Code    : 작성된 코드가 들어있음
    Stack   : 함수들이 어떤 순서로 실행되어야하는지 이 함수가 끝나면 어디로 다시 돌아가는지 대한 정보를 저장
    Heap    : Object 생성, 데이터들을 만들때 그 데이터들이 저장되는 공간, 동적으로 할당된 변수들이 저장
    Data    : 전역변수, static 변수 할당



Process
   |
   |
   ------> Code
   |
   |
   ------> Heap
   |
   |
   ------> Data
   |
   |
   ------> Thread1
   |          |
   |          |
   |          ------> stack
   |
   ------> Thread2
              |
              |
              ------> stack

쓰레드 : 한 프로세스 안에서 여러 개가 동작할 수 있다.
        각각 저마다 해야되는 업무를 배정 받는다(일꾼이라고 불림)
        저마다 필요한 일들을 수행
        -> 이쓰레드들은 자기들만으 ㅣ수행해야되는 함수의 호출을 기억해야되기 때문에 쓰레드마다 스택이 할당

이 프로세스 안에서 동작하는 일꾼들은 결국 한 프로그램을 위해서 일해야 되므로 프로세스에 지정된 Code, Heap, Data들을 공톡적으로 접근해서
공통적으로 업데이트가 가능
즉 내 프로그램에서 음악을 들으면서 사진을 편집할 수  있는 어플리케이션이 있다면 음안을 재생하는 쓰레드하나 와 사진을편집하는 쓰레드 등이 있고
이 쓰레드들을 동시다발적으로 발생할 수 있기 떄문에 프로세스가 좀더 표울적으로 일 할 수 있도록 도움을 준다.
만약 쓰레드가 하나라면 음악을 들으면서 사진편집이 불가능하다.

Point
쓰레드는 자신들이 일을 수행할 때 어디에서 부터 어디까지 일했고 그다음엔 어디로 가야하는지
이런 일에 흐름을 기억할 수 있는 고유의 Stack이 지정되어져 있지만 Data, Heap, Code 같은 공통적인 데이터 리소스는
프로세스에 있기때문에 쓰레드들은 이 프로세스에 공통적으로 할당된 리소스에 동시다발적으로 접속해서 동시다발적으로 업데이트 해야돼서
공유 하면서 사용한다.

그래서 멀티쓰레딩을 못하면 공통적으로 업데이트 하면서 순서가 맞지않으면 문제가 발생한다 --> 조금 까다로움

==> 프로세스는 프로그래밍을 동작하는 최고 단위, 쓰레드는 프로세스안에서 동시에 여러개가 수행될 수 있는 작은 일꾼 단위
