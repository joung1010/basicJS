1. remote
local history 문제점 : 로컬 pc에 문제가 생기거나 다른 환경에서 작업하고싶을때 repository에 접근이 불가능
--> 그래서 remote라는 server에 나의 git repository 업로드 해두어서 항상 다른 PC에서도 접근 가능하고
    다른 개발자들과 협업도 가능하다.

2. clone : 이미 서버에 존재하는 repository 를 가지고 올때 이용

3. push : 내가 local 에서 작업한 내용을 서버어 올리고 싶을때 사용

4. pull : server에 업데이트 된 내용을 나의 local 에 update 하고 싶을때 사용

5. fork : 기존에 존재하던 repository 에 commit 해 나가는 것이 아니라 나의 repository 에 동일하게 복사해서 가져오는 것
    pr(pull request) :  나의 repository 에 commit 한 내용들은 제출
    rebase: 내가 fork 한 repository 가 새롭게 업데이트가 됬다면 rebase 를 통해 최신 버전으로 sync 를 맞추고 merge 할 수 있다.

---------------------------------------------------------------------------

1. remote repository 를 나의 local pc로 가져오기

    git repository 에서 code 버튼을 클릭
    --> 해당 repository 를 직접 zip 파일로 다운로드 하거나 해당 repository 의 주소를 복사할 수 있다.

    git clone 깃 repository 주소

2. git remote : 서버 repository 정보를 확인할 수 있다.
                기본적으로 이름은 origin
   git remote -v : 이 orgin이 어떤걸 가리키고 있는 지 정확한 정보를 확인할 수 있다.
   ex) origin  https://github.com/joung1010/practiceWeb.git (fetch)
       origin  https://github.com/joung1010/practiceWeb.git (push)

  git remote add origin이름 서버이름 : 현재 폴더에 다른 github 링크를 추가하고 싶을때 사용
                                    만약 fork repository 라면 다수의 origin을 설정할 수 있다.
 ex) git remote add server(origin 이름이 server임) 서버이름

 git remote show origin이름 : orgin 정보를 상세히 확인 가능
  remote origin
   Fetch URL: https://github.com/joung1010/practiceWeb.git
   Push  URL: https://github.com/joung1010/practiceWeb.git
   HEAD branch: main
   Remote branch:
     main tracked
   Local branch configured for 'git pull':
     main merges with remote main
   Local ref configured for 'git push':
     main pushes to main (up to date)

3. git push : 로컬에 있는 history 를 서버에 업데이트

* [2022-04-19] [635482f] | ADD NEW FILE {{Mason}}  (HEAD -> main) <-- 현재 local 에 있는 HEAD는 4번째를 가리키고 있음
* [2021-02-23] [ad34c29] | first version {{joung1010}}  (origin/main, origin/HEAD) <-- 깃허브 서버는 현재 3번째 커밋까지 들어가 있음
* [2021-02-23] [59a53b7] | first version {{joung1010}}
* [2021-02-23] [5a976b1] | Initial commit {{joung1010}}

즉 로컬이 origin 보다 commit 이 하나 더 앞서가 있는 것을 확인
추가)git remote set-url origin https://깃아이디:토큰@github.com/깃아이디/레포지토리명.git
git push 등의 명령어 접근하기위해서 깃 계정 비밀번호를 사용했으나 계정에서 토근을 생성해서 접근하는 방식으로 변경
토큰 생성하는법:
git profile -> settings -> Developer settings -> Personal access tokens

+) 간단하고 빠르게 push 하기 SSH(secure shell protocol) key 사용
    : 우리가 사용하고 있는 terminal 과 server 간에 안전하게 우리 아이디와 비밀번호를 안전하게 유지해 주는 방법
    나의 컴퓨터에 private key를 생성해서 넣음으로써 push를 할때 아이디와 비밀번호를 입력하지 않아도 된다.
    설정 git profile -> settings -> New SHH key

    git bash 명령어
    ssh-keygen -t rsa -b 4096 -C "example@email.com"

    ssh-keygen : ssh 비대칭키 생성 명령어
    -t rsa : 암호화 타입을 rsa 방식을 사용
    -b 4096 : 생성할 키의 비트수 4096으로 지정, rsa 타입을 위해선 최소 768 비트가 필요하며 default로 2048 비트이다. 4096으로 더 난독화된 키를 생성한다.
    -C “example@email.com“ : 코멘트로 일종의 주석이다. 보통 이메일 계정이나 아이디등을 입력한다.

id_rsa는 비밀키이고, id_rsa.pub는 공개키이다
    --> 첫번쨰 enter를 눌러서 키생성
    --> 비밀번호 입력
