git 은 명령어기반으로 작동

git 명령어 옵션 형식을 가지고 있음
ex) git config, git commit, git add


git config --list : git의 모든 환경설정

파일로 환경설정 정보 열어보기
git config --global -e
깃 설정 파일을 다른 파일로 열어보고 싶을때
code . : visual studio 로 열림

code를 editor와 연동해서 사용하기
git config --global core.editor "code" : 다른 명령어를 수행할 수 있도록 터미널이 활성화됨
git config --global core.editor "code --wait" : 열어진 파일이 종료되기 전에는 다른 명령어 수행 불가

git  사용자 정보 등록하기
git config --global user.name "mason"               : 사용자 이름 설정
git config --global use.email "joung4342@gmail.com" : 이메일 설정
git config --global user.name 등록된 user name 확인
git config --global use.email 등록된 user email 확인

git config --global core.autocrlf ture(window) / input(mac)
--> 운영체제마다 에디터로 새로운 줄바꿈을 할때 들어가는 문자열이 다르다
    window : \r\n
    mac :   \n
   그래서 Git Reposiotry 를 다양한 운영체제에서 쓰는 경우에 git history나 git blame을 보는데 문제가 있을 수 있다
   이것을 수정할 수 있는 설정이 core.autocrlf

   git init : git 초기화
   ls -all : 숨겨진 폴더에 .git파일이 생겼음 (폴더 나 파일 이름 앞에. 있으면 숨겨진 폴더명임)
   .git 폴더안에 git와 관련된 모든 정보들이 있다.
   기본적으로 git init을 하면 master branch가 생성 된다.

   rm -rf .git : git 파일 삭제

   git 에서 해당 명령어에 해당하는 속성값을 확인하고 싶을때는
   ex) git config --h

   git status : git 의 상태를 볼 수 있다.

   반복되는 명령어를 단축해서 쓰고 싶다면
   git config --global alias
   ex) git config --global alias.st status
    --> git st 만 작성해도 status 명령어 실행된다.


    Git workFlow
    총 크게 3가지로 구분

        working directory : 우리가 프로젝트의 파일들을 수정하는 작업하고 있는 공간

        staging area      : 어느 정도 작업하다가 버전 히스토리에 저장할 준비가 되어있는 파일들을 옮겨놓는 공간

        .git directory    : 버전에 히스토리를 가지고 있는 공간

        예를 들어 프로젝트 폴더에서 a.txt, b.txt , c.txt 파일들을 수정하고 있다가  b 와 c 의 파일들을 모두 작업하고 어느정도 준비가
        되었는데 라고 결심을 하게 되면
        b 와 c 파일들을 staging area  로 옮겨 두게 된다다

                    |
                    |   commit
                    |
                    ↓
          commit 이라는 명령어를 이용해서  staging area  있는 파일들을 git .directory(버전 히스토리)에 저장

          a 파일도 작업을 완료하면 staging area 로 옮기고 commit 명령어를 통해서 히스토리에 저장하고

          이 git directory 에 저장된 버전들은 checkout 이라는 명령어를 이용해서 언제든지 원하는 버전으로 돌아갈 수 있다.
          이렇게 저장된 git history는 나의 컴퓨터에만 보관되기때문에 만약 컴퓨터에 문제가 생기면 다 없어지게 된다.

          그래서 보통 이런 git directory 를 나의 pc만 저장하는 것이 아니라
                    |
                    |    push
                    ↓
          Github와 같은 서버에 push 라는 명령어를 이용해서 나의 git directory 를 서버에 업로드 해 둘 수 있다.
          그리고 서버에서 다시 local 로 다운로드 받고 싶을때는
                    |
                    |   pull
                    ↓
          pull 이라는 명령어를 통해서 다시 local 로 받아올 수 있다.

          이때 각각의 commit 에는 고유한 hash code 가 부여된다.
          이 코드 값을 통해서 버전 정보를 참조할 수 있다
          이 commit에는 어떤 버전인지 버전의 관련된 메세지와 누가 작성했는지 와 날짜와 시간정보등이 있다.
          -------------------------------------------------------
                    absc21321234......      b.txt c.txt
                    hashcode

                    message     메시지
                    autor       작성자
                    date/time    시간


        이때 working directory 는 크게 두가지로 나누어 볼 수 있다

                |
                |
                ---->   untracked  : 새로 만들어진 파일이거나 기존에 존재하는 프로젝트에서 Git 을 초기화 하게 되면 Git이 파일에 대한 정보가 없는데
                |                    즉 아직 트레킹이 되지않는 파일들을 untracked
                |
                ---->   tracked  : Git 이 이미 알고있는 Git 트레킹 하고 있는 파일이라면 tracked
                            |
                            |       git 이 트레킹 하고 있는 파일등 중에서도 지금 이시점에서 수정이 되었는지 유무에 따라서 분리됨
                            ---->   unmodified :    수정이 안됨(이전 버전과 비교해서 수정이 되지 않았음)
                            |
                            |
                            ---->   modified  :     수정됨(수정이 된 파일들만 staging area 로 옮겨 갈 수 있다.

추가 untracked 된 파일들을 staging area 로 옮기려면 git add라는 명령어를 이용하면 된다.
        그러면 즉 staging area 즉 git history 에 저장할 준비가 된다는 뜻이다 (commit할 파일들이 있다)

+) git add * : 디렉토리에 있는 모든 파일들을 staging area 로 이동
git add . : 모든 파일들 포함해서 git staging area 에 추가됨
git rm --cached * : staging area 있는 모든 파일 삭제

특 정파일을 git에 포함시키지 않고 싶을 때
.git ignore 이라는 파일에 추가 반영 하고싶지 않는 파일명이나 경로를 추가

git status -h(help) 옵션을 주면 해당 명령어 와 함꼐 사용할 수 있는 옵션들을 확인할 수 있다 default 는 long
이때 -s (short) 옵션에서
A : added 되었다는 뜻
??? : untracked 파일
AM : working directory 에 수정이 된 파일

어떤 파일에 내용이 수정되었는지 확인 하고 싶을때는 git -diff 를 이용
아무런 옵션이 없으면 working directory 에 있는 것만 비교해서 볼 수 있다.
ex)
diff --git a/c.txt b/c.txt
--> a는 이전 버전(working directory에 있는 파일이라면 commit된 버전을 가리키거나 또는 staging area에
변경된 내용이 있다면 그것이 이전버전)
--> b 지금 버전

index 12a8798..311c32c 100644 --> index : Git 내부적으로 파일들을 참고 할때 쓰는 것

--- a/c.txt
+++ b/c.txt
--> 이전버전 a/c.txt 파일과 지금버전 b/c.txt 파일을 비교

@@ -1 +1,2 @@  -->- 는 이전 파일을 의미 -1 은 이전버전의 첫번째 줄봐 hellworld 는 이전버전 첫번쨰줄에서 나온 상태이고  새로 변경된 사항은 + 는 현재 파일에서 첫번째 줄에서 두번째 줄까지 확인해
 hello world!
+add
즉 기존 hello world! 에서 add가 추가된 상태이고 + 다음에 변경된 내용이 나온다.
만약 줄이 삭제가 되었다면 - 내용이 표기된다.

staging area 안에 있는 변경 사항을 확인하고 싶을때는
git diff --staged/--cached 라는 옵션을 주면 된다.
ex)
diff --git a/b.txt b/b.txt
new file mode 100644
index 0000000..12a8798
--- /dev/null       --> 이전에는 아무것도 없었는데
+++ b/b.txt     --> b.txt 파일이 추가됨
@@ -0,0 +1 @@   --> 이전에는 아무줄도 없었지만 새로운 파일에 hello world!가 추가되었다.
+hello world!

이렇게 콘솔창에서 보는 것이 어렵다면 툴과 연동시키면된다.
git config --global -e 에서
[diff]
	tool = vscode
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE

	추가하고 git difftool / git difftool --cached 붙여서 실행

버전 등록하기
git commit
아무런 옵션없이 사용하면 기본 템플릿이 나온다.

git log를 이용해서 commit에 관한 log를 확인할 수 있다.

git commit -m(message) "second commit" : -m 옵션을 통해서 커밋 메세지를 바로 입력가능

내 working directory에 있는 변경사항을 add 없이 바로 커밋하고 싶을때는
git commit -am "all commit"


git을 커밋할때 Tip
Git Repository 는 어떤 규모의 commit 을 해나가면 적당할까???
.git directory에 있는 우리의 commit들은 사실 히스토리의 창고이다
즉 우리의 작업대를 버전별로 나누어서 관리할 수 있는 유용한 창고이다.
그래서 우리가 어떤 어플리케이션을 만든다면 이 어플리케이션을 세분화해서 기능별로 작은단위로 만들어 나가는 것이 중요하다
커다란 코끼리를 히스토리에 한번에 넣기 보다는 작은 단위로 나눠서 히스토리에 저장하는 것이 좋다.
그렇다고  commit 메세지를 의미없이 commit1 2 3 이런식으로 작성하기 보다는
조금더 의미있는 이름을 지정해서 저장하는 것이 중요하다
만약 commit 을 할때 충돌이 발생했을때 충동을 고쳤다면 그 고친 내용만 포함한 commit을 만들어야지
충돌 해결 , 버그 수정, 새로운 기능 추가등 한꺼번에 커밋하게 되면 커밋을 볼때 혼동이 오기 때문에
commit 메세지에 맞게 해당 내용만 포함해서 커밋 하는것이 중요하다.

