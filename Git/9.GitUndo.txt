local 에서 작업하고 있는 staging area 나 working directory 에서 작업하는 내용을 초기화할 수 있는 방법
1.파일이 working directory 에 있을 때 초기화
    git restore  파일명 :  파일 초기화
    git restore . : 현재 working directory 초기화

2. 파일이 staging area 있을때 초기
    git restore --staged 파일명
    git restore --staged .

+) git restore --source=해쉬코드 파일명  : 어던 commit 으로부처 파일을 초기화 할 건지 지정할 수 있다.
   git restore ----source=Head~2 파일명
+) git clean -fd : untracked 한 파일들을 삭제 해주는 명령어

3. git reset 해쉬코드   :   HEAD 가 가리키는 포인터를 해당 커밋으로 초기화 시킴
   git reset Head~순번
이때 그냥 git reset 을 사용하면 git reset --mixed 옵션을 사용한 것과 동일하다.
즉, version history 에서는 commit을 삭제하지만 작업하고 있던 내용들은 working directory에 옮겨 놓는 그런 역할을 한다.

+) git reset --soft 해쉬코드/HEAD~순번 : git staging area 로 초기화
                                      --> 변경된 내용들을 staging area로 가지고 온다.

   git reset --hard : 현재 가리키고 있는 포인터가 HEAD를 가리키고 있고 그상태에서 초기화를 한다는 것은 내가 마지막으로 커밋하고
                    수정한 모든 local의 파일들을 초기화 한다는 것과 동일하다.

즉 이 reset 이라는 것은 특정 commit 으로 초기화 할 수 있고 초기화 할때 변경했던 모든 내용들을 다시 local에 가지고오거나
    완전히 삭제하거나 이렇게 옵션들이 나눠져 있다.

4.  git commit --amend -m "Add new file": git commit 이름을 잘못했을 때(가장 최신 commit 단 아직 서버에 push 하지 않았을때)

5. git commit --amend: 이미 commit 된 파일의 내용을 수정해야 되는 경우(가장 최신 commit 단 아직 서버에 push 하지 않았을때)
                --> commit 메세지는 그대로인데 내용만 수정이 되어있음

6. git reflog : reference log 의 줄임말로 바로 이전에 HEAD가 가리키고 있었던 내용들을 다 기억하고 있음으로써
                우리가 원하는 시점으로 다시 돌아갈 수 있게 된다.
                --> 우리가 여태까지 실행했던 명령어들 과 그것으로 부터 변경되었던 HEAD 가 가리키고
                있었던 포인트 까지 확인할 수 있다.

ex)98955fc (HEAD -> master) HEAD@{0}: reset: moving to HEAD~2
   fa7bbd6 HEAD@{1}: reset: moving to HEAD
   fa7bbd6 HEAD@{2}: reset: moving to HEAD~1
   e94152f HEAD@{3}: reset: moving to HEAD~2
   585ecb4 HEAD@{4}: commit (amend): add new file
   976bd10 HEAD@{5}: commit (amend): add new file
   8286ee2 HEAD@{6}: commit: .
   0ddd7ab HEAD@{7}: commit: Add payment UI
   e94152f HEAD@{8}: commit: .
   fa7bbd6 HEAD@{9}: commit: Add payment client
   1d11be8 HEAD@{10}: commit: WIP
   98955fc (HEAD -> master) HEAD@{11}: reset: moving to HEAD^
   0440fb9 HEAD@{12}: commit: WIP
   98955fc (HEAD -> master) HEAD@{13}: commit: Add payment library and Add payment service
   707de7d HEAD@{14}: commit: Setup Dependencies
   20ee16f HEAD@{15}: commit (initial): Initialise Project

돌아가고 싶은 시점의 해쉬코드를 복사해서
git reset 해쉬코드

주의 사항 : 언제든지 돌아갈 수 있지만 단 commit 이 이전에 된 상태에서만 가능!!!!
          만약 아직 commit을 하지 않은 상태에서 local에 있는 파일을 git reset --hard로 초기화 했다면
          다시 돌아갈 확률이 작다.

7. git revert 해쉬코드  : 해당 commit 에서 변경했던 모든 내용들을 다 삭제하고 예전으로 돌려 주는 그런 commit 을 만들게 된다.
   git revert HEAD~순번
   --> master branch 에 문제가 발생한 commit 들, 내가 다시 돌리고 싶은 것들, history에 남겨놓고 싶은 아이들
       즉 이미 server master branch 에 commit 된 파일이라면 reset, rebase 를 이용하기 보다는 revert를 이용하는 것이 좋다.

+) git revert --no-commit : 바로 commit을 하지 않고 취소되는 변경사항을 staging area로 이동시켜 준다.

8. git rebase -i(interactive) 해쉬코드
    interactive rebasing  :최신 버전 커밋이 아닌 이전 버전 커밋들을 수정
    --> 단 rebasing 을 하는 순간 특정 commit 을 수정하는 순간 그 수정된 커밋 앞에 있는 모든 포인터들이 업데이트 된다.
        이때 내가 수정하고 싶은 commit 의 이전 해쉬코드 부터 시작해야 된다.

주의사항: 기존에 존재하는 history를 수정하는 것 이기때문에 서버에 업로드된 경우라면 피하는게 좋다.
ex)
* [2020-11-01] [0ddd7ab] | Add payment UI    (HEAD -> master)
* [2020-11-01] [e94152f] | .  
* [2020-11-01] [fa7bbd6] | Add payment client  
* [2020-11-01] [1d11be8] | WIP      <-- 이부분을 rebasing 하게 된다면
그앞에 있는 모든 포인터들  0ddd7ab,  e94152f, fa7bbd6 은 전부 새로운 아이템이 된다.
즉 1d11be8 이부분을 수정하게 된다면
결과 적으로 그 앞에 있는 commit 들을 포함해서 총 4개의 history 가 업데이트 된다.
--> git rebase i 98955fc
* [2020-11-01] [98955fc] | Add payment library and Add payment service  
* [2020-11-01] [707de7d] | Setup Dependencies  
* [2020-11-01] [20ee16f] | Initialise Project

rebasing -i 옵션들
# p, pick <commit> = use commit
    --> 이 변경사항 괜찮아 이거써
# r, reword <commit> = use commit, but edit the commit message
    --> 괜찮은데 메세지는 변경해야겠어
# e, edit <commit> = use commit, but stop for amending
    --> commit은 할건데 안에 변경사항은 바꿔야겠어
# s, squash <commit> = use commit, but meld into previous commit
    --> 여려개의 커밋을 하나로 묶을꺼야 (메세지 남김)
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
    --> squash와 비슷한데 메세지는 안남김
# d, drop <commit> = remove commit
    --> 해당 커밋 제거