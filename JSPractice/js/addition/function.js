const num =1;
const num2 = 2;
const result = num + num2;
console.log(result)
const num2 =1;
const num3 = 2;
const result2 = num2 + num3;
console.log(result2)
// 이렇게 반복적으로 우리가 쓰이는 일들을 계속 계속 하게 된다면 끊임없이 작성해야된다
// 그래서 프로그래밍에서 이렇게 반복적으로 계산되는 수행되는 일들이 있다면 이것을 이제 함수로 만든다
// 왜냐??? -> 함수로 만들면 재 사용이 가능하기 때문이다.

/*
function add(a,b){
    return a + b;
}
*/

// 여기서 add라는 함수는  우리가 정의한 범위 블럭 안에 있다 {}
// 즉 우리는 {return a + b} <- 이 정의한 코드블럭을 add라는 이름으로 지정해 준 것이다.
// 이 기능을 수행하는 코드 블럭의 이름은 add고 자바스크립트 언어 또는 자바스크립트 엔진에게 이건 함수야 라고 말할 수 있는 keyword가 function이다
// 우리가 변수를 선언할때 변수라는 것을 알려주는 키워드로 const let 을 사용한 것처럼 함수를 선언할때도 function이라는 키워드를 사용
// 이때 함수의 이름은 의미 있는 이름을 사용 (간결하지만 의미있는 이름을 사용)

function add(num1,num2){
    return num1 + num2;
}
// 이때 (a,b) 는 이 함수가 몇가지의 인자를 받는지를 정의한다 여기서는 a , b 2개의 인자를 받는다.
// 타입스크립트 나 자바 와 같이 타입이 있는 언어는 a : number , b : number 와 같이 숫자의 a , b 를 받아온다 와 같이 조금더 직관적이다.
// 하지만 자바스크립트에는 타입이 없기때문에 해당 안지가 어떤 타입인지 유추해야 된다.
// 여기서 a, b 는 우리가 변수에서 이름을 정의한 것처럼 우리가 지정한 이름이다. 따라서 numb1, numb2 이런식으로 변경해도 가능
// 우리가 데이터를 변수라는 이름을 통해서 접근한 것처럼
// 여기 인자에서도 numb1, numb2 라는 이름으로 우리가 정의한 코드블럭안에서 해당 인자들의 값에 접근할 수 있다.

// 여기서 이 add라는 함수에 어떤 인자가 들어오는지는 이 add라는 함수를 호출하는 사람이 결정한다.
// 그래서 해당 인자에 어떤 데이터가 들어갈지는 잘 모르겠지만 이 데이터를 num1 과 numb2라는 이름을 통해서 접근
// 그래서 해당 코드블럭 안에서 num1 과 num2 의 이름을 통해서 해당 데이터에 접근한다.

// 이 함수 자체에는 num1 과 num2에 어떤 값이 들어갈지는 모르겠지만 즉 이 함수를 작성하는 시점에는 어떤 데이터가 올지 알 수가 없지만
// 해당 인자의 이름을 통해 접근한 데이터해서 해당 값을 더한후에 그값을 반환 하겠다 라고 얘기 하는 것이다.

const sum = add(3,4);
// 이렇게 함수를 호출하면 실제 데이터가 sum에게 전달 된다.
// 즉 함수를 호출한다는 것은 add라는 여기에 미리 정의된 함수에 num1 에는 3이 num2 에는 4가 지정이되고
// 함수가 호출되면서 우리가 정의한 이 코드블럭이 실행된다. --> 우리가 정의한 기능을 수행하고 결과값을 반환한다.
// 그래서 3 과 4를 더한 값 7 를 반환한다.
// 반환된 값을 sum이라는 변수에 할당한다.